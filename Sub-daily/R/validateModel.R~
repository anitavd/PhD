#####################################################################
#
# Cross-validation (leave-one-out) of Bayesian Hierarchical Model
# for hourly precipitation
#
#
# Anita Verpe Dyrrdal, met.no, Dec 2012
#
#####################################################################

rm(list=ls())
library(SpatialExtremes)
library(extRemes)
library(ismev)

loc <- c()
scale <- c()
shape.est <- c()
east <- c()
north <- c()
lon <- c()
lat <- c()
stnr <- c()
elev <- c()
M5 <- c()
M5.3h <- c()
loc.3h <- c()
tam.jja <- c()
summerRR <- c()
distSea <- c()
MSP <- c()
MAP <- c()
data.am <- matrix(NA,46,80)
data.am[,1] <- seq(1967,2012)
j <- 1
no.obs <- 0   #length of the longest series
t<-2

#Read files with observations
tipping.stations <- list.files("/home/anitavd/PhD/Sub-daily/data/tipping/",pattern = "hourly_AM.txt", full.names=F)
geonor.stations <- list.files("/home/anitavd/PhD/Sub-daily/data/geonor/",pattern = "hourly_AM.txt", full.names=F)
all.stations <- c(tipping.stations,geonor.stations)
no.stations <- length(all.stations)

for (i in 1:no.stations) {
print(i)
	file <- all.stations[i]
	station <- try(read.table(paste("/home/anitavd/PhD/Sub-daily/data/tipping/",file,sep=""),header=F,skip=3),silent=T)
	if(class(station)=="try-error") station <- try(read.table(paste("/home/anitavd/PhD/Sub-daily/data/geonor/",file,sep=""),header=F,skip=3),silent=T)
	colnames(station) <- c("STNR","EAST","NORTH","LON","LAT","YEAR","RR_1")
	station$RR_1[which(station$RR_1 >= 50)] = NA
	data <- station$RR_1[!is.na(station$RR_1)]

	if(length(data) > 9) {

		first.year <- station$YEAR[1]
		last.year <- tail(station$YEAR,1)
		idx1 <- which(data.am[,1]==first.year)
		idx2 <- which(data.am[,1]==last.year)
		for (l in idx1:idx2) {
			try(data.am[l,t] <- station$RR_1[which(station$YEAR==data.am[l,1])],silent=T)
		}
		t <- t+1


		loc <- rbind(loc,gev.fit(data)$mle[1])
		scale <- rbind(scale,gev.fit(data)$mle[2]) 
		shape.est <- rbind(shape.est,gev.fit(data)$mle[3])  

		stnr <- rbind(stnr, station$STNR[1])
		east <- rbind(east, station$EAST[1])
		north <- rbind(north, station$NORTH[1])
		lon <- rbind(lon, station$LON[1])
		lat <- rbind(lat, station$LAT[1])
		#data.am[1:length(data),j] <- data
		no.obs <- max(no.obs,length(which(!is.na(data))))


		#IMPORT ALL COVARIATES
		#Extract elevation from climate grid
		x = round((station$EAST - (-75000 + 500)) / 1000, digits = 0) + 1
		y = round((station$NORTH - (6450000 + 500)) / 1000, digits = 0) + 1
		point = (1550 - y) * 1195 + (x - 1) + 1
		filename=sprintf("/home/anitavd/data/dem1.bil")
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		elev.point <- readBin(con, integer(), size=2, n=1)	# [m] 
		close(con)

		#If grid cell is outside the grid, find a grid cell nearby that is within the grid
		if(elev.point==0) {
			offset <- c(1, -1, 1195, -1195, 1196, -1196, 1194, -1194)
			for (k in 1:8) {
				con=file(filename,open="rb")
				seek(con, where = ((point + offset[k] - 1) * 2), origin = "start")   # Set position
				elev.point <- readBin(con, integer(), size=2, n=1)	# [m] 
				close(con)
				if(elev.point>0) {
					point <- point + offset[k]				
					break()
				}
			}
		}
		elev <- rbind(elev,as.numeric(elev.point))		

		#Extract M5(24h) computed from the climate grid
		filename=sprintf("/vol/klimadata/archive/anitavd/M200/ny/M5_RRuncor.bil")
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		M5 <- rbind(M5,readBin(con, integer(), size=2, n=1))	# [mm] 
		close(con)

		#M5 for 3-hour precipitation
		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/M5_rr3.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		M5.3h <- rbind(M5.3h,readBin(con,integer(),size=2,n=1))
		close(con)

		#Loc for 3-hour precipitation
		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/loc.RR3.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		loc.3h <- rbind(loc.3h,readBin(con,integer(),size=2,n=1))
		close(con)

		#Summer temperature
		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/tam_jja.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		tam.jja <- rbind(tam.jja,(readBin(con,integer(),size=2,n=1)-2730)/10)
		close(con)

		#Area dominated by summer precipitation (1)
		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/area_summerPrecip.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		summerRR <- rbind(summerRR,readBin(con,integer(),size=2,n=1))
		close(con)

		#Distance from coast
		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/distsea_km.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		distSea <- rbind(distSea,readBin(con,integer(),size=2,n=1))
		close(con)

		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/AMJJASOprec_19572012.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		MSP <- rbind(MSP,readBin(con,integer(),size=2,n=1))
		close(con)

		filename<-"/home/anitavd/PhD/Sub-daily/Covariates/annualPrec_19572012.bil"
		con=file(filename,open="rb")
		seek(con, where = ((point - 1) * 2), origin = "start")   # Set position
		MAP <- rbind(MAP,readBin(con,integer(),size=2,n=1))
		close(con)

		j <- j+1
		
	}

}

no.sites <- length(loc)

data.am <- data.am[,1:(no.sites+1)]

#Extend series to no.obs by generating a GEV series with the same parameters as original series.
#for (i in 2:(no.sites+1)) {

#	no.na <- length(which(is.na(data.am[,i])))
#	add <- round(gen.gev(gevmle(data.am[,i][which(!is.na(data.am[,i]))]),no.na),digits=1)

#	no.toohigh <- length(which(add>(max(data.am[,i],na.rm=T)+10) | add<0))
#	if(no.toohigh > 0) add[which(add>(max(data.am[,i],na.rm=T)+10) | add<0)] <- round(gen.gev(gevmle(data.am[,i][which(!is.na(data.am[,i]))]),no.toohigh),digits=1)

#	data.am[,i][which(is.na(data.am[,i]))] <- add

#}

shape <- rep(0.15,no.sites)

coord <- cbind(east,north)

east.norm <- (east-mean(east,na.rm=T))/apply(east,2,sd)
north.norm <- (north-mean(north,na.rm=T))/apply(north,2,sd)

coord.norm <- cbind(east.norm, north.norm)
colnames(coord.norm) <- c("cov6","cov1")

colnames(coord) <- c("east","north")
elev[which(elev == -1)] = NA
M5[which(M5 == -1)] = NA
M5.3h[which(M5.3h == -1)] = NA
loc.3h[which(loc.3h == -1)] = NA
loc.3h <- loc.3h/100
MAP[which(MAP == -1)] = NA
MSP[which(MSP == -1)] = NA

##################################################################################################
#Specify covariates

#Normalize covariates
cov1 <- (north-mean(north,na.rm=T))/apply(north,2,sd)
cov2 <- (tam.jja-mean(tam.jja,na.rm=T))/apply(tam.jja,2,sd)
cov3 <- (elev-mean(elev,na.rm=T))/apply(elev,2,sd)
cov4 <- (distSea-mean(distSea,na.rm=T))/apply(distSea,2,sd)
cov5 <- cov2*summerRR
cov6 <- east.norm
cov7 <- (M5-mean(M5,na.rm=T))/apply(M5,2,sd)
cov8 <- (M5.3h-mean(M5.3h,na.rm=T))/apply(M5.3h,2,sd)
cov9 <- (loc.3h-mean(loc.3h,na.rm=T))/apply(loc.3h,2,sd)
cov10 <- (MAP-mean(MAP,na.rm=T))/apply(MAP,2,sd)
cov11 <- (MSP-mean(MSP,na.rm=T))/apply(MSP,2,sd)


#cov1<-north
#cov2<-tam.jja
#cov3<-elev
#cov4<-distSea
#cov5<-tam.jja*summerRR

shape.form <- y ~ 1    #constant

for (l in 1) {

if(l==1) {
c1 <- cov1
c2 <- cov2
c3 <- cov3
c4 <- cov8
}
if(l==2) {
c1 <- cov1
c2 <- cov2
c3 <- cov7
}
if(l==3) {
c1 <- cov1
c2 <- cov2
c3 <- cov8
}
if(l==4) {
c1 <- cov1
c2 <- cov4
c3 <- cov9
}
if(l==5) {
c1 <- cov2
c2 <- cov3
c3 <- cov10
}
if(l==6) {
c1 <- cov3
c2 <- cov4
c3 <- cov11
}


##################################################################################################################
#Prior level

#Priors for sill and range (for normalized coordinates)
s11 <- 2
s12 <- 6
s21 <- 2
s22 <- 2
r11 <- 2
r12 <- 2
r21 <- 1.5
r22 <- 1.5

#Hyperparameters
hyper <- list()
hyper$sills <- list(loc = c(s11,s12), scale = c(s21,s22), shape = c(2,1))  #inverse gamma prior
hyper$ranges <- list(loc = c(r11,r12), scale = c(r21,r22), shape = c(2,1))  #gamma prior, uninformative	
hyper$smooths <- list(loc = c(1,1/3), scale = c(1,1/3), shape = c(2,1))	 #gamma prior, uninformative
hyper$betaMeans <- list(loc = c(5,0,0,0,0), scale = c(2,0,0), shape = 0.1)	 #multivariate normal distribution, uninformative 
 
hyper$betaIcov <- list(loc = solve(diag(c(100,100,100,100,100))),scale=solve(diag(c(100,100,100))),shape=solve(diag(c(0.0000000001), 1, 1)))  #covariance matrix

prop <- list(gev = c(1.2, 0.08, 0.1), ranges = c(0.7, 0.8, 0.7), smooths = c(0,0,0))

#start <- list(sills = c(5,2,2), ranges = c(30000,30000,100000), smooths= c(1,1,1), beta = list(loc = c(5,1,1,1), scale = c(2,1,1,1),shape = c(0.15))) #NORMALIZED 
start <- list(sills = c(5,2,2), ranges = c(1,1,10), smooths= c(1,1,1), beta = list(loc = c(5,1,1,1,1), scale = c(2,1,1),shape = c(0.1)))   


#################################################################################################
#Leave-one-out cross-validation

score1 <- 0
score2 <- 0
score3 <- 0
score4 <- 0

for (h in 2:(no.sites+1)) {

print(h)

	data.am.ex <- data.am[,-h]
	c1.ex <- c1[-(h-1)]
	c2.ex <- c2[-(h-1)]
	c3.ex <- c3[-(h-1)]
	c4.ex <- c4[-(h-1)]
	coord.ex <- coord.norm[-(h-1),]

	loc.form <- y ~ c1.ex + c2.ex + c3.ex + c4.ex
	scale.form <- y ~ c2.ex + c4.ex
	shape.form <- y ~ 1    #constant

	marg.cov <- cbind(c1.ex,c2.ex,c3.ex,c4.ex)
	colnames(marg.cov) <- c("c1.ex","c2.ex","c3.ex","c4.ex")

	#Run model
	mc <- latent(data=data.am.ex[,-1], coord.ex, marg.cov = marg.cov, loc.form = loc.form, scale.form = scale.form,shape.form = shape.form, hyper = hyper, prop = prop, start = start,n = 1000, burn.in= 300, thin = 15)  

	sink(paste("/home/anitavd/PhD/Sub-daily/mc_validation.txt",sep=""))
	print(mc)
	sink()

	#Read results
	con <- file("/home/anitavd/PhD/Sub-daily/mc_validation.txt")
	lm <- readLines(con,n=20)
	close(con)

	#Estimated regression parameters for location
	loc.lm1 <- as.numeric(strsplit(lm[11]," ")[[1]][3])
	if(is.na(loc.lm1)) loc.lm1 <- as.numeric(strsplit(lm[11]," ")[[1]][4])

	loc.lm2 <- as.numeric(strsplit(lm[11]," ")[[1]][5])
	if(is.na(loc.lm2)) loc.lm2 <- as.numeric(strsplit(lm[11]," ")[[1]][6])
        if(is.na(loc.lm2)) loc.lm2 <- as.numeric(strsplit(lm[11]," ")[[1]][7])

	loc.lm3 <- as.numeric(strsplit(lm[11]," ")[[1]][8])
	if(is.na(loc.lm3)) loc.lm3 <- as.numeric(strsplit(lm[11]," ")[[1]][9])
        if(is.na(loc.lm3)) loc.lm3 <- as.numeric(strsplit(lm[11]," ")[[1]][10])
	if(is.na(loc.lm3)) loc.lm3 <- as.numeric(strsplit(lm[11]," ")[[1]][7])

	loc.lm4 <- as.numeric(strsplit(lm[11]," ")[[1]][11])
	if(is.na(loc.lm4)) loc.lm4 <- as.numeric(strsplit(lm[11]," ")[[1]][12])
        if(is.na(loc.lm4)) loc.lm4 <- as.numeric(strsplit(lm[11]," ")[[1]][13])
	if(is.na(loc.lm4)) loc.lm4 <- as.numeric(strsplit(lm[11]," ")[[1]][10])
	if(is.na(loc.lm4)) loc.lm4 <- as.numeric(strsplit(lm[11]," ")[[1]][9])

	#Estimated regression parameters for scale
	scale.lm1 <- as.numeric(strsplit(lm[17]," ")[[1]][3])
	if(is.na(scale.lm1)) scale.lm1 <- as.numeric(strsplit(lm[17]," ")[[1]][4])

	scale.lm2 <- as.numeric(strsplit(lm[17]," ")[[1]][5])
	if(is.na(scale.lm2)) scale.lm2 <- as.numeric(strsplit(lm[17]," ")[[1]][6])
        if(is.na(scale.lm2)) scale.lm2 <- as.numeric(strsplit(lm[17]," ")[[1]][7])

	scale.lm3 <- as.numeric(strsplit(lm[17]," ")[[1]][8])
	if(is.na(scale.lm3)) scale.lm3 <- as.numeric(strsplit(lm[17]," ")[[1]][9])
        if(is.na(scale.lm3)) scale.lm3 <- as.numeric(strsplit(lm[17]," ")[[1]][10])
	if(is.na(scale.lm3)) scale.lm3 <- as.numeric(strsplit(lm[17]," ")[[1]][7])

	scale.lm4 <- as.numeric(strsplit(lm[17]," ")[[1]][11])
	if(is.na(scale.lm4)) scale.lm4 <- as.numeric(strsplit(lm[17]," ")[[1]][12])
        if(is.na(scale.lm4)) scale.lm4 <- as.numeric(strsplit(lm[17]," ")[[1]][13])
	if(is.na(scale.lm4)) scale.lm4 <- as.numeric(strsplit(lm[17]," ")[[1]][10])
	if(is.na(scale.lm4)) scale.lm4 <- as.numeric(strsplit(lm[17]," ")[[1]][9])


	score1 <- score1 + abs(loc[h-1] - (loc.lm1 + (loc.lm2*c1[h-1]) + (loc.lm3*c2[h-1]) + (loc.lm4*c3[h-1]) ))
	score2 <- score2 + (loc[h-1] - (loc.lm1 + (loc.lm2*c1[h-1]) + (loc.lm3*c2[h-1]) + (loc.lm4*c3[h-1]) ))^2
	score3 <- score3 + abs(scale[h-1] - (scale.lm1 + (scale.lm2*c1[h-1]) + (scale.lm3*c2[h-1]) + (scale.lm4*c3[h-1]) ))
	score4 <- score4 + (scale[h-1] - (scale.lm1 + (scale.lm2*c1[h-1]) + (scale.lm3*c2[h-1]) + (scale.lm4*c3[h-1]) ))^2

}

print(score1/no.sites)
print(sqrt(score2/no.sites))
print("")
print(score3/no.sites)
print(sqrt(score4/no.sites))


}
